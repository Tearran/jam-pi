#!/bin/bash

#
# Copyright (c) 2023 Joseph C Turner
# All rights reserved.
#
# This script.
# demonstrates the compatibility of multiple interfaces for displaying menus or messages.
# It uses an array to set the options for all three menus (bash, whiptail, and dialog).
# The script checks if whiptail or dialog are available on the system and uses them to display the menu in a more user-friendly way.
# If neither of these programs is available, it falls back to using bash.
# while both are installed falls back to whiptail to display the menu.
# The user can override the default program by passing an argument when running the script:
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#



#DIRECTORY variable to the absolute path of the script's directory
#directory=$(cd "$(dirname "$0")" && pwd)
directory="$(dirname "$(readlink -f "$0")")"
filename=$(basename "${BASH_SOURCE[0]}")
selfpath="$directory"/"$filename"
#libpath="${directory}"/"its-lib" #Include these scripts Library
libpath="$selfpath"


clear
# Check for the availability of whiptail and dialog command-line programs
# Set the default program to use for displaying messages
( ! command -v whiptail >/dev/null && ! command -v dialog >/dev/null ) && default="bash"
(  command -v whiptail >/dev/null && ! command -v dialog >/dev/null ) && default="whiptail"
( ! command -v whiptail >/dev/null &&  command -v dialog >/dev/null ) && default="dialog"

# if both whiptail and dialog change to prefered
( command -v whiptail >/dev/null &&  command -v dialog >/dev/null ) && default="whiptail"


[[ "$1" == -b ]] &&  default="bash"
[[ "$1" == -w ]] &&  default="whiptail"
[[ "$1" == -n ]] &&  default="dialog"

[[ "$1" == -m ]] && {
export NEWT_COLORS="
root=blue,black
border=green,black
title=green,black
roottext=red,black
window=red,black
textbox=white,black
button=black,green
compactbutton=white,black
listbox=white,black
actlistbox=black,white
actsellistbox=black,green
checkbox=green,black
actcheckbox=black,green
"
}

# Check the cpu architecture. for later handeling if nessery
architecture=$(dpkg --print-architecture)
[[ "$architecture" == "armf" ]] && true ;

#setup menu arrays
readarray -t functionarray 		< <( grep -A1 '^##.*@.*:*' "$libpath" | grep -oP '^\w+\(\)' | sed 's/()//' )
readarray -t descriptions 		< <( grep -e '^##.*@.*' "$libpath" | sed "s|^## *@||g;s| ## *@.*||g;s|.*: *||g" )
readarray -t descriptionarray 	< <( for i in "${!descriptions[@]}" ; do  printf "%s\n %s\n"  "$i" "${descriptions[i]}" ; done )

## System@Settings:Advanced Settings (armbian-config)
cmd_advance()
{
	sudo armbian-config
}

## System@CPU info:Example from Bash Utility (cpu_test.sh)
cmd_cpu_info()
{
    [[ ! -f /usr/sbin/cpu_test_library.sh ]] && cmd_cpu_ls ;
    [[ -f /usr/sbin/cpu_test_library.sh ]] && shell_command=$(sudo /usr/sbin/cpu_test_library.sh )
    message_box=$( printf '%s ' "${shell_command[@]}" ) ;
    see_message
}


## System@CPU info:An example function (lscpu)
cmd_cpu_ls()
{

	shell_command="$(lscpu)" ;
    message_box=$( printf '%s ' "${shell_command[@]}" ) ;
    see_message
}

## System@Bootup Time:An example function (systemd-analyze time)
cmd_boot_time()
{

	shell_command="$(systemd-analyze time)" ;
    message_box=$( printf '%s ' "${shell_command[@]}" ) ;
    see_message
}

## System@Login Info :An example function (Login Info)
cmd_lslogins()
{

	shell_command="$(lslogins)" ;
    message_box=$( printf '%s ' "${shell_command[@]}" ) ;
    see_message
}


# Function to display a message using whiptail, dialog or printf depending on what is available on the system
see_message()
{
	# Use if neither whiptail nor dialog are available on the system
    if [[ "$default" == "bash" ]] || ( ! command -v whiptail >/dev/null && ! command -v dialog >/dev/null ); then
		# Use printf to display the message
		printf '%s ' "${shell_command[@]}"

	# Use as default if whiptail is available
	elif [[ "$default" == "whiptail" ]] && ( command -v whiptail >/dev/null ); then
        # Use whiptail to display the message
		whiptail --backtitle "newt whitail: $architecture" --title "description" --msgbox "${message_box[@]}" 0 0 --clear --scrolltext

    # Use if dialog is available on the system but not whiptail
    elif [[ "$default" == "dialog" ]] && (  command -v dialog >/dev/null ); then
        # Use dialog to display the message
		dialog --backtitle "ncurses dialog: $architecture" --title "description" --msgbox "${message_box[@]}" 0 0 ; clear
	fi
}

see_menu()
{

 	if [[ "$default" == "bash" ]]; then
  PS3="Enter a number: "
		select i in "${descriptions[@]}" ; do ${functionarray[$REPLY - 1]} ; break ; done

 	elif [[ "$default" == "whiptail" ]];  then
    	OPTION=$(whiptail --backtitle "newt whiptail: $architecture"  --title "Config" --menu "Choose your option" 20 80 7 "${descriptionarray[@]}" 3>&1 1>&2 2>&3)
		[[ -n $OPTION ]] && clear && "${functionarray[$OPTION]}"

	elif [[ "$default" == "dialog" ]];  then
    	OPTION=$(dialog --backtitle "ncurses dialog: $architecture"  --title "Config" --menu "Choose your option" 20 80 7 "${descriptionarray[@]}" 3>&1 1>&2 2>&3)
		[[ -n $OPTION ]] && clear && "${functionarray[$OPTION]}"
	fi
}

see_help(){

	echo ""
	echo "Usage: ${filename%.*} [ -h | -b | -n | -w | -d | -dev ]"
	echo -e "Options:"
	echo -e "	-h  Print this help."
    echo -e "	-b  GNU bash "
    echo -e "	-n  NCURSES dialog "
    echo -e "	-w  NEWT whiptail - default colors "
    echo -e "	-m  dark mode whiptail "
	echo -e "	-dev Options:"
    for i in "${!functionarray[@]}"; do
		printf '\t\t%s\t%s \n' "${functionarray[i]}" "${descriptions[i]}"
	done

	}

main()
{
    if [[ "$1" == --dev ]] ; then
        default="bash"
        local found=false
        for i in "${!functionarray[@]}"; do
            if [ "$2" == "${functionarray[i]}" ]; then
                "${functionarray[i]}"
                found=true
                break
            fi
        done
        if ! $found; then
            see_help
            exit 0
        fi
    elif [[ "$1" == -h ]] ; then
        see_help
    else
        see_menu
    fi
}

main "$@"
